{"name":"Single-molecule Dataset (SMD) Format","tagline":"A file format for publication and exchange of data from experiments in single-molecule biophysics","body":"Single-molecule Dataset (SMD) Format\r\n==\r\n\r\nThe single-molecule dataset (SMD) format has been jointly developed in the groups of Dan Herschlag ([Stanford](http://cmgm.stanford.edu/herschlag/)) and Ruben Gonzalez ([Columbia](http://www.columbia.edu/cu/chemistry/groups/gonzalez/index.html)) to facilitate publication and exchange of data and analysis results obtained in single-molecule studies.\r\nThis repository contains Matlab utility functions for creating, validating, saving and loading SMD structures in [Matlab](http://www.mathworks.com/products/matlab/). \r\n\r\nFormat Description\r\n--\r\n\r\nThe representation of a SMD structure in Matlab is as follows\r\n\r\n> -   **dataset** : `struct`  \r\n    -   **.id** : `string`  \r\n        Unique identifier for collection of traces (e.g. a hash)\r\n    -   **.type** : `string`  \r\n        Decriptor for datatype\r\n    -   **.columns** : `1 x D cell`  \r\n        column labels, e.g. `{'donor', 'acceptor'}`, `{'fret'}`, \r\n        `{'viterbi_state_mean', 'viterbi_state_index'}`\r\n    -   **.attr** : `struct`  \r\n        Dataset level features (e.g. descriptors of experimental \r\n        conditions)\r\n    -   **.data** : `1 x N struct`  \r\n        -   **.id** : `string`  \r\n            Unique identifier for trace (e.g. a hash)\r\n        -   **.attr** : `struct`  \r\n            Any trace-specific features that are not series\r\n        -   **.index** : `T x 1 matrix`  \r\n            Row index for trace data (e.g. acquisition times)\r\n        -   **.values** : `T x D matrix`  \r\n            Trace data. `dataset.data(n).values(t, d)` contains the value of\r\n            trace `n`, column `d`, at index `t`.  \r\n\r\nThe top-level structure of the SMD format contains four fields \r\n\r\n-   **id**: This field serves as a unique identifier for the particular set of traces that are grouped in this data structure. While there are no specific requirements enforced by SMD, it is recommended that a hash function be used to generate a identifier for each data set.  This will help insure that when data sets generated at different times are combined it will be easy to track the source of each data set.\r\n-   **attr**: This attributes field is provided to store information related to that particular group of traces. This could be information such as the day the experiment was completed, the exact experimental conditions, or any other information that relates to the data set as a whole.\r\n-   **columns**: This holds a set of labels that describe the columns in each values entry for individual time series, which are assumed to be identical across the data set (e.g. donor, acceptor, Viterbi algorithm-inferred state). \r\n-   **data**: This holds a list of entries for each trace, which themselves contain a set of fields:\r\n    -   **id**: This field holds a trace-specific identifier, which may be generated by running a hash function on the values matrix.\r\n    -   **index**: This field contains a list of row labels for the values matrix, which typically hold the measurement times. This field should have the same length as the values field. \r\n    -   **values**: This field contains the actual trace data, where each column represents a different channel. Most simply, a channel can contain raw single molecule data, but depending on the user, it could equally well be used to store window-averaged data, thresholded data, fits of the data or an arbitrary number of other series data.\r\n    -   **attr**: This attributes field has much the same role as the top-level attribute field, but is specific to this particular trace. Within this data field a user can store any additional information they are interested in storing. This could be anything from a kinetic or thermodynamic parameter algorithmically determined for a particular trace to an observation of that particular trace that an experimentalist wants to note for future reference.\r\n\r\nInstallation\r\n--\r\n\r\n1.  Download this repository from  \r\n    https://github.com/smdata/smd-matlab/archive/master.zip  \r\n\r\n2.  Unzip `master.zip` to some location (e.g. `c:\\path\\`)\r\n\r\n3.  Add the `smdata` directory to the Matlab path by typing\r\n\r\n    ```\r\n    addpath(genpath('c:\\path\\smd-matlab\\'))\r\n    ```\r\n\r\n    where `c:\\path\\` is the directory where `master.zip` was unpacked.\r\n\r\nFunctions\r\n--\r\n\r\n**smd.create(data, column_labels, varargin)**: Creates a SMD structure from supplied data.\r\n\r\n**smd.write_json(filename, dataset)**: Saves a SMD structure as JSON (`.json`)or compressed JSON (`.json.gz`).\r\n\r\n**smd.read_json(filename)**: Loads a SMD structure from JSON (`.json`)or compressed JSON (`.json.gz`).\r\n\r\n**smd.isvalid(dataset)**: Checks if supplied struct is a valid SMD instance.\r\n\r\n**smd.filter(dataset)**: Returns a filtered dataset by matching `id` and `attr` values, or by applying a custom function with boolean output to each trace.\r\n\r\n**smd.merge(data1, data2, ...)**: Returns a merged dataset containing all traces in multiple datasets.\r\n\r\nExample Usage\r\n--\r\n\r\nGenerate some fake data: Mixture of 3 gaussian distributions\r\n\r\n```matlab\r\nstate_mean = [0.1, 0.5, 0.7];\r\nstate_noise = [0.05, 0.10, 0.05];\r\nnum_traces = 10;\r\nmax_length = 100;\r\nfor n = 1:num_traces\r\n    T = ceil(max_length * rand());\r\n    states = ceil(length(state_mean) * rand(T,1));\r\n    observations = state_mean(states)' + state_noise(states)' .* randn(T,1);\r\n    data{n} = [states, observations];\r\nend\r\n```\r\n\r\nCreate a SMD structure\r\n\r\n```matlab\r\n% initialize smd structure\r\ndataset = smd.create(data, {'state', 'observation'})\r\n% add global attributes \r\ndataset.attr.description = 'example data: mixture of 3 gaussians with equal occupancy';\r\ndataset.attr.state_mean = state_mean;\r\ndataset.attr.state_noise = state_noise;\r\ndataset.attr.max_length = max_length;\r\n```\r\n\r\nSave data to disk\r\n\r\n```matlab\r\n% save as Matlab data\r\nsave('example.mat', 'dataset', '-struct');\r\n% save as plain text JSON (uncompressed)\r\nsmd.write_json('example.json', dataset);\r\n% save as plain text JSON (with gzip compression)\r\nsmd.write_json('example.json.gz', dataset);\r\n```\r\n\r\nLoad data from disk\r\n```matlab\r\n% read matlab data\r\nexample = load('example.mat');\r\n% read plain text json (uncompressed)\r\nexample = smd.read_json('example.json', dataset);\r\n% read plain text json (with gzip compression)\r\nexample = smd.read_json('example.json.gz', dataset);\r\n```\r\n\r\nFilter data\r\n```matlab\r\n% filter out traces with <= 50 data points\r\nfiltered = smd.filter(example, 'func', @(d) size(d.values,1) > 50);\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}